
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 19 20:34:36 CEST 2024
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoExp;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresExp;
import ast.*;
import ast.expresionP.*;
import ast.lineaP.*;
import ast.lineaP.funcionP.*;
import ast.lineaP.buclesP.*;
import ast.lineaP.condicionalP.*;
import ast.tiposP.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 19 20:34:36 CEST 2024
  */
public class ConstructorASTExp extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTExp() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTExp(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\003\000\002\002\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\002" +
    "\000\002\003\011\000\002\003\010\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\011\007\000\002" +
    "\007\003\000\002\007\004\000\002\007\006\000\002\010" +
    "\010\000\002\012\005\000\002\012\002\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\013\003\000\002\013\010\000\002" +
    "\013\004\000\002\013\011\000\002\006\013\000\002\006" +
    "\011\000\002\016\005\000\002\016\002\000\002\014\005" +
    "\000\002\014\003\000\002\014\002\000\002\015\005\000" +
    "\002\015\004\000\002\021\003\000\002\020\004\000\002" +
    "\020\002\000\002\017\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\004\000\002\017\005\000\002\017\004" +
    "\000\002\017\005\000\002\017\004\000\002\030\006\000" +
    "\002\030\003\000\002\030\003\000\002\027\005\000\002" +
    "\027\003\000\002\027\002\000\002\056\006\000\002\056" +
    "\006\000\002\056\006\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\022\011\000\002\022\015\000" +
    "\002\022\011\000\002\022\007\000\002\022\007\000\002" +
    "\022\007\000\002\023\003\000\002\023\003\000\002\024" +
    "\013\000\002\024\011\000\002\025\013\000\002\025\002" +
    "\000\002\026\006\000\002\026\002\000\002\031\004\000" +
    "\002\031\007\000\002\032\005\000\002\032\005\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\044\005" +
    "\000\002\044\003\000\002\043\004\000\002\043\004\000" +
    "\002\043\003\000\002\042\005\000\002\042\003\000\002" +
    "\041\005\000\002\041\003\000\002\040\005\000\002\040" +
    "\003\000\002\037\005\000\002\037\003\000\002\036\004" +
    "\000\002\036\003\000\002\035\005\000\002\035\003\000" +
    "\002\034\005\000\002\034\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\006\000\002\045" +
    "\006\000\002\045\007\000\002\045\005\000\002\045\003" +
    "\000\002\045\006\000\002\045\005\000\002\055\005\000" +
    "\002\055\002\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\047\003\000\002\047" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\051\003\000\002\051\003\000" +
    "\002\053\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\024\002\ufffc\003\ufffc\004\ufffc\005\ufffc\041" +
    "\ufffc\052\ufffc\056\ufffc\070\ufffc\071\ufffc\001\002\000\004" +
    "\002\u011b\001\002\000\024\002\001\003\022\004\020\005" +
    "\006\041\010\052\023\056\015\070\016\071\014\001\002" +
    "\000\014\042\uffee\043\uffee\046\uffee\057\u0111\071\uffee\001" +
    "\002\000\024\002\ufff8\003\ufff8\004\ufff8\005\ufff8\041\ufff8" +
    "\052\ufff8\056\ufff8\070\ufff8\071\ufff8\001\002\000\110\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\022\uffed\023\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed" +
    "\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\042\uffed\043" +
    "\uffed\046\uffed\053\uffed\061\uffed\062\uffed\064\uffed\067\uffed" +
    "\071\uffed\104\uffed\001\002\000\024\002\uffff\003\uffff\004" +
    "\uffff\005\uffff\041\uffff\052\uffff\056\uffff\070\uffff\071\uffff" +
    "\001\002\000\110\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\022\uffea\023\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\042\uffea\043\u010c\046\uffea\053\uffea\061\uffea\062" +
    "\uffea\064\uffea\067\uffea\071\uffea\104\uffea\001\002\000\024" +
    "\002\ufffd\003\ufffd\004\ufffd\005\ufffd\041\ufffd\052\ufffd\056" +
    "\ufffd\070\ufffd\071\ufffd\001\002\000\110\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\022\uffef\023\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\042\uffef\043\uffef\046\uffef" +
    "\053\uffef\061\uffef\062\uffef\064\uffef\067\uffef\071\uffef\104" +
    "\uffef\001\002\000\110\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\022\uffeb\023\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\042\uffeb\043\uffeb\046\uffeb\053\uffeb\061\uffeb" +
    "\062\uffeb\064\uffeb\067\uffeb\071\uffeb\104\uffeb\001\002\000" +
    "\014\004\020\005\031\041\010\056\015\071\014\001\002" +
    "\000\004\104\u0107\001\002\000\110\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\022\uffec\023\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\042\uffec\043\uffec\046\uffec\053" +
    "\uffec\061\uffec\062\uffec\064\uffec\067\uffec\071\uffec\104\uffec" +
    "\001\002\000\010\042\034\046\224\071\035\001\002\000" +
    "\004\104\223\001\002\000\004\071\026\001\002\000\010" +
    "\016\ufff5\064\ufff5\104\ufff5\001\002\000\024\002\ufffe\003" +
    "\ufffe\004\ufffe\005\ufffe\041\ufffe\052\ufffe\056\ufffe\070\ufffe" +
    "\071\ufffe\001\002\000\004\063\027\001\002\000\016\004" +
    "\ufff0\005\ufff0\041\ufff0\052\ufff0\056\ufff0\071\ufff0\001\002" +
    "\000\016\004\020\005\031\041\010\052\023\056\015\071" +
    "\014\001\002\000\106\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\022\uffee\023\uffee\025\uffee\026\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037" +
    "\uffee\040\uffee\042\uffee\043\uffee\053\uffee\061\uffee\062\uffee" +
    "\064\uffee\067\uffee\071\uffee\104\uffee\001\002\000\006\016" +
    "\221\064\222\001\002\000\006\042\034\071\035\001\002" +
    "\000\110\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8" +
    "\023\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\042\uffe8\043\213\046\uffe8\053\uffe8\061\uffe8\062\uffe8\064" +
    "\uffe8\067\uffe8\071\uffe8\104\uffe8\001\002\000\012\016\ufff4" +
    "\017\036\064\ufff4\104\ufff4\001\002\000\052\021\040\024" +
    "\062\037\065\042\073\054\051\061\056\063\067\065\061" +
    "\066\053\071\060\072\045\073\046\074\057\075\044\076" +
    "\066\077\050\100\055\101\047\102\063\103\054\001\002" +
    "\000\072\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\022\uff9b" +
    "\023\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b" +
    "\062\uff9b\064\uff9b\104\uff9b\001\002\000\052\021\040\024" +
    "\062\037\065\042\073\054\051\061\056\063\067\065\061" +
    "\066\053\071\060\072\045\073\046\074\057\075\044\076" +
    "\066\077\050\100\055\101\047\102\063\103\054\001\002" +
    "\000\072\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013" +
    "\uff99\014\uff99\015\uff99\016\uff99\017\uff99\020\uff99\022\uff99" +
    "\023\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032" +
    "\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99" +
    "\062\uff99\064\uff99\104\uff99\001\002\000\072\006\uffd0\007" +
    "\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\022\uffd0\023\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\062\uffd0\064\uffd0\104" +
    "\uffd0\001\002\000\072\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\022\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037" +
    "\uffd1\040\uffd1\062\uffd1\064\uffd1\104\uffd1\001\002\000\004" +
    "\061\207\001\002\000\004\061\205\001\002\000\004\061" +
    "\202\001\002\000\072\006\uff80\007\uff80\010\uff80\011\uff80" +
    "\012\uff80\013\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020" +
    "\uff80\022\uff80\023\uff80\025\uff80\026\uff80\027\uff80\030\uff80" +
    "\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80\037" +
    "\uff80\040\uff80\062\uff80\064\uff80\104\uff80\001\002\000\004" +
    "\061\177\001\002\000\014\004\020\005\031\041\010\056" +
    "\015\071\014\001\002\000\072\006\uff94\007\uff94\010\uff94" +
    "\011\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017" +
    "\uff94\020\uff94\022\uff94\023\uff94\025\uff94\026\uff94\027\uff94" +
    "\030\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036" +
    "\uff94\037\uff94\040\uff94\062\uff94\064\uff94\104\uff94\001\002" +
    "\000\004\061\170\001\002\000\072\006\uff81\007\uff81\010" +
    "\uff81\011\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81" +
    "\017\uff81\020\uff81\022\uff81\023\uff81\025\uff81\026\uff81\027" +
    "\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81" +
    "\036\uff81\037\uff81\040\uff81\062\uff81\064\uff81\104\uff81\001" +
    "\002\000\072\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82" +
    "\013\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82\022" +
    "\uff82\023\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\037\uff82\040" +
    "\uff82\062\uff82\064\uff82\104\uff82\001\002\000\052\021\040" +
    "\024\062\037\065\042\073\054\051\061\056\063\067\065" +
    "\061\066\053\071\060\072\045\073\046\074\057\075\044" +
    "\076\066\077\050\100\055\101\047\102\063\103\054\001" +
    "\002\000\004\061\164\001\002\000\074\006\uff83\007\uff83" +
    "\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83\016" +
    "\uff83\017\uff83\020\uff83\022\uff83\023\uff83\025\uff83\026\uff83" +
    "\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035" +
    "\uff83\036\uff83\037\uff83\040\uff83\061\156\062\uff83\064\uff83" +
    "\104\uff83\001\002\000\004\061\153\001\002\000\044\037" +
    "\065\054\051\061\056\063\067\065\061\066\053\071\060" +
    "\072\045\073\046\074\057\075\044\076\066\077\050\100" +
    "\055\101\047\102\063\103\054\001\002\000\072\006\uff7f" +
    "\007\uff7f\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015" +
    "\uff7f\016\uff7f\017\uff7f\020\uff7f\022\uff7f\023\uff7f\025\uff7f" +
    "\026\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034" +
    "\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\062\uff7f\064\uff7f" +
    "\104\uff7f\001\002\000\072\006\uff9a\007\uff9a\010\uff9a\011" +
    "\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\022\uff9a\023\uff9a\025\uff9a\026\uff9a\027\uff9a\030" +
    "\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\062\uff9a\064\uff9a\104\uff9a\001\002\000" +
    "\052\021\040\024\062\037\065\042\073\054\051\061\056" +
    "\063\067\065\061\066\053\071\060\072\045\073\046\074" +
    "\057\075\044\076\066\077\050\100\055\101\047\102\063" +
    "\103\054\001\002\000\004\061\146\001\002\000\052\021" +
    "\uff90\024\uff90\037\uff90\042\uff90\054\uff90\061\uff90\063\uff90" +
    "\065\uff90\066\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075" +
    "\uff90\076\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90" +
    "\001\002\000\056\006\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\135" +
    "\022\uffad\023\uffad\025\uffad\026\uffad\027\uffad\030\uffad\037" +
    "\134\040\uffad\062\uffad\064\uffad\104\uffad\001\002\000\052" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\022\uffaa\023\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\040\uffaa\062\uffaa\064\uffaa\104" +
    "\uffaa\001\002\000\052\006\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\022" +
    "\uffa8\023\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\040\uffa8" +
    "\062\uffa8\064\uffa8\104\uffa8\001\002\000\044\037\065\054" +
    "\051\061\056\063\067\065\061\066\053\071\060\072\045" +
    "\073\046\074\057\075\044\076\066\077\050\100\055\101" +
    "\047\102\063\103\054\001\002\000\052\006\122\007\126" +
    "\010\130\011\127\012\125\013\121\014\uffa6\015\uffa6\016" +
    "\uffa6\017\uffa6\022\uffa6\023\uffa6\025\uffa6\026\uffa6\027\uffa6" +
    "\030\uffa6\040\uffa6\062\uffa6\064\uffa6\104\uffa6\001\002\000" +
    "\036\014\116\015\115\016\uffa4\017\uffa4\022\uffa4\023\uffa4" +
    "\025\117\026\114\027\uffa4\030\uffa4\040\uffa4\062\uffa4\064" +
    "\uffa4\104\uffa4\001\002\000\026\016\uffa2\017\uffa2\022\uffa2" +
    "\023\uffa2\027\110\030\111\040\uffa2\062\uffa2\064\uffa2\104" +
    "\uffa2\001\002\000\022\016\uffa0\017\uffa0\022\uffa0\023\uffa0" +
    "\040\uffa0\062\uffa0\064\uffa0\104\uffa0\001\002\000\022\016" +
    "\uff9e\017\uff9e\022\uff9e\023\uff9e\040\uff9e\062\uff9e\064\uff9e" +
    "\104\uff9e\001\002\000\022\016\uff9c\017\uff9c\022\105\023" +
    "\uff9c\040\uff9c\062\uff9c\064\uff9c\104\uff9c\001\002\000\012" +
    "\016\ufff3\023\103\064\ufff3\104\ufff3\001\002\000\052\021" +
    "\040\024\062\037\065\042\073\054\051\061\056\063\067" +
    "\065\061\066\053\071\060\072\045\073\046\074\057\075" +
    "\044\076\066\077\050\100\055\101\047\102\063\103\054" +
    "\001\002\000\022\016\uff9d\017\uff9d\022\105\023\uff9d\040" +
    "\uff9d\062\uff9d\064\uff9d\104\uff9d\001\002\000\052\021\040" +
    "\024\062\037\065\042\073\054\051\061\056\063\067\065" +
    "\061\066\053\071\060\072\045\073\046\074\057\075\044" +
    "\076\066\077\050\100\055\101\047\102\063\103\054\001" +
    "\002\000\022\016\uff9f\017\uff9f\022\uff9f\023\uff9f\040\uff9f" +
    "\062\uff9f\064\uff9f\104\uff9f\001\002\000\050\024\062\037" +
    "\065\042\073\054\051\061\056\063\067\065\061\066\053" +
    "\071\060\072\045\073\046\074\057\075\044\076\066\077" +
    "\050\100\055\101\047\102\063\103\054\001\002\000\050" +
    "\024\uff85\037\uff85\042\uff85\054\uff85\061\uff85\063\uff85\065" +
    "\uff85\066\uff85\071\uff85\072\uff85\073\uff85\074\uff85\075\uff85" +
    "\076\uff85\077\uff85\100\uff85\101\uff85\102\uff85\103\uff85\001" +
    "\002\000\050\024\uff84\037\uff84\042\uff84\054\uff84\061\uff84" +
    "\063\uff84\065\uff84\066\uff84\071\uff84\072\uff84\073\uff84\074" +
    "\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101\uff84\102\uff84" +
    "\103\uff84\001\002\000\022\016\uffa3\017\uffa3\022\uffa3\023" +
    "\uffa3\040\uffa3\062\uffa3\064\uffa3\104\uffa3\001\002\000\050" +
    "\024\062\037\065\042\073\054\051\061\056\063\067\065" +
    "\061\066\053\071\060\072\045\073\046\074\057\075\044" +
    "\076\066\077\050\100\055\101\047\102\063\103\054\001" +
    "\002\000\050\024\uff86\037\uff86\042\uff86\054\uff86\061\uff86" +
    "\063\uff86\065\uff86\066\uff86\071\uff86\072\uff86\073\uff86\074" +
    "\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101\uff86\102\uff86" +
    "\103\uff86\001\002\000\050\024\uff88\037\uff88\042\uff88\054" +
    "\uff88\061\uff88\063\uff88\065\uff88\066\uff88\071\uff88\072\uff88" +
    "\073\uff88\074\uff88\075\uff88\076\uff88\077\uff88\100\uff88\101" +
    "\uff88\102\uff88\103\uff88\001\002\000\050\024\uff89\037\uff89" +
    "\042\uff89\054\uff89\061\uff89\063\uff89\065\uff89\066\uff89\071" +
    "\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077\uff89" +
    "\100\uff89\101\uff89\102\uff89\103\uff89\001\002\000\050\024" +
    "\uff87\037\uff87\042\uff87\054\uff87\061\uff87\063\uff87\065\uff87" +
    "\066\uff87\071\uff87\072\uff87\073\uff87\074\uff87\075\uff87\076" +
    "\uff87\077\uff87\100\uff87\101\uff87\102\uff87\103\uff87\001\002" +
    "\000\026\016\uffa5\017\uffa5\022\uffa5\023\uffa5\027\uffa5\030" +
    "\uffa5\040\uffa5\062\uffa5\064\uffa5\104\uffa5\001\002\000\050" +
    "\024\uff8d\037\uff8d\042\uff8d\054\uff8d\061\uff8d\063\uff8d\065" +
    "\uff8d\066\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d" +
    "\076\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\001" +
    "\002\000\050\024\uff8b\037\uff8b\042\uff8b\054\uff8b\061\uff8b" +
    "\063\uff8b\065\uff8b\066\uff8b\071\uff8b\072\uff8b\073\uff8b\074" +
    "\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b\101\uff8b\102\uff8b" +
    "\103\uff8b\001\002\000\050\024\062\037\065\042\073\054" +
    "\051\061\056\063\067\065\061\066\053\071\060\072\045" +
    "\073\046\074\057\075\044\076\066\077\050\100\055\101" +
    "\047\102\063\103\054\001\002\000\050\024\062\037\065" +
    "\042\073\054\051\061\056\063\067\065\061\066\053\071" +
    "\060\072\045\073\046\074\057\075\044\076\066\077\050" +
    "\100\055\101\047\102\063\103\054\001\002\000\050\024" +
    "\uff8e\037\uff8e\042\uff8e\054\uff8e\061\uff8e\063\uff8e\065\uff8e" +
    "\066\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076" +
    "\uff8e\077\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e\001\002" +
    "\000\050\024\uff8a\037\uff8a\042\uff8a\054\uff8a\061\uff8a\063" +
    "\uff8a\065\uff8a\066\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a" +
    "\075\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103" +
    "\uff8a\001\002\000\050\024\uff8c\037\uff8c\042\uff8c\054\uff8c" +
    "\061\uff8c\063\uff8c\065\uff8c\066\uff8c\071\uff8c\072\uff8c\073" +
    "\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\101\uff8c" +
    "\102\uff8c\103\uff8c\001\002\000\050\024\uff8f\037\uff8f\042" +
    "\uff8f\054\uff8f\061\uff8f\063\uff8f\065\uff8f\066\uff8f\071\uff8f" +
    "\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100" +
    "\uff8f\101\uff8f\102\uff8f\103\uff8f\001\002\000\052\006\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\017\uffa9\022\uffa9\023\uffa9\025\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\040\uffa9\062\uffa9\064\uffa9\104\uffa9\001" +
    "\002\000\046\010\130\011\127\012\125\013\121\014\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\022\uffa7\023\uffa7\025\uffa7\026" +
    "\uffa7\027\uffa7\030\uffa7\040\uffa7\062\uffa7\064\uffa7\104\uffa7" +
    "\001\002\000\052\006\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\022\uffac" +
    "\023\uffac\025\uffac\026\uffac\027\uffac\030\uffac\040\uffac\062" +
    "\uffac\064\uffac\104\uffac\001\002\000\052\021\uff90\024\uff90" +
    "\037\uff90\042\uff90\054\uff90\061\uff90\063\uff90\065\uff90\066" +
    "\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076\uff90" +
    "\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90\001\002\000" +
    "\004\071\136\001\002\000\052\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\022\uffae\023\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\040\uffae\062\uffae\064\uffae\104\uffae\001\002\000\052\021" +
    "\040\024\062\037\065\042\073\054\051\061\056\063\067" +
    "\065\061\066\053\071\060\072\045\073\046\074\057\075" +
    "\044\076\066\077\050\100\055\101\047\102\063\103\054" +
    "\001\002\000\010\016\142\023\103\040\141\001\002\000" +
    "\072\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96" +
    "\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\022\uff96\023" +
    "\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96" +
    "\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\062" +
    "\uff96\064\uff96\104\uff96\001\002\000\052\021\uff91\024\uff91" +
    "\037\uff91\042\uff91\054\uff91\061\uff91\063\uff91\065\uff91\066" +
    "\uff91\071\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91" +
    "\077\uff91\100\uff91\101\uff91\102\uff91\103\uff91\001\002\000" +
    "\052\021\040\024\062\037\065\042\073\054\051\061\056" +
    "\063\067\065\061\066\053\071\060\072\045\073\046\074" +
    "\057\075\044\076\066\077\050\100\055\101\047\102\063" +
    "\103\054\001\002\000\010\016\142\023\103\064\145\001" +
    "\002\000\072\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93" +
    "\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\020\uff93\022" +
    "\uff93\023\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93" +
    "\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040" +
    "\uff93\062\uff93\064\uff93\104\uff93\001\002\000\004\062\147" +
    "\001\002\000\072\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\022\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\062\uffc9\064\uffc9\104\uffc9\001\002\000\006\023" +
    "\103\040\151\001\002\000\072\006\uff92\007\uff92\010\uff92" +
    "\011\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017" +
    "\uff92\020\uff92\022\uff92\023\uff92\025\uff92\026\uff92\027\uff92" +
    "\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036" +
    "\uff92\037\uff92\040\uff92\062\uff92\064\uff92\104\uff92\001\002" +
    "\000\052\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\022\uffab\023\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\040\uffab\062\uffab\064" +
    "\uffab\104\uffab\001\002\000\052\021\040\024\062\037\065" +
    "\042\073\054\051\061\056\063\067\065\061\066\053\071" +
    "\060\072\045\073\046\074\057\075\044\076\066\077\050" +
    "\100\055\101\047\102\063\103\054\001\002\000\006\023" +
    "\103\062\155\001\002\000\072\006\uff98\007\uff98\010\uff98" +
    "\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\017" +
    "\uff98\020\uff98\022\uff98\023\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036" +
    "\uff98\037\uff98\040\uff98\062\uff98\064\uff98\104\uff98\001\002" +
    "\000\056\016\uffcd\021\040\024\062\037\065\042\073\054" +
    "\051\061\056\062\uffcd\063\067\065\061\066\053\071\060" +
    "\072\045\073\046\074\057\075\044\076\066\077\050\100" +
    "\055\101\047\102\063\103\054\001\002\000\006\016\162" +
    "\062\161\001\002\000\010\016\uffce\023\103\062\uffce\001" +
    "\002\000\072\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\022" +
    "\uffd2\023\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\062\uffd2\064\uffd2\104\uffd2\001\002\000\052\021\040" +
    "\024\062\037\065\042\073\054\051\061\056\063\067\065" +
    "\061\066\053\071\060\072\045\073\046\074\057\075\044" +
    "\076\066\077\050\100\055\101\047\102\063\103\054\001" +
    "\002\000\010\016\uffcf\023\103\062\uffcf\001\002\000\004" +
    "\062\165\001\002\000\072\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\022\uffc8\023\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\062\uffc8\064\uffc8\104\uffc8\001\002\000" +
    "\006\023\103\062\167\001\002\000\072\006\uff95\007\uff95" +
    "\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\022\uff95\023\uff95\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035" +
    "\uff95\036\uff95\037\uff95\040\uff95\062\uff95\064\uff95\104\uff95" +
    "\001\002\000\052\021\040\024\062\037\065\042\073\054" +
    "\051\061\056\063\067\065\061\066\053\071\060\072\045" +
    "\073\046\074\057\075\044\076\066\077\050\100\055\101" +
    "\047\102\063\103\054\001\002\000\006\023\103\062\172" +
    "\001\002\000\072\006\uff97\007\uff97\010\uff97\011\uff97\012" +
    "\uff97\013\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97" +
    "\022\uff97\023\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\032\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97" +
    "\040\uff97\062\uff97\064\uff97\104\uff97\001\002\000\076\006" +
    "\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\022\uffb8\023\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\042\034\061" +
    "\174\062\uffb8\064\uffb8\104\uffb8\001\002\000\052\021\040" +
    "\024\062\037\065\042\073\054\051\061\056\063\067\065" +
    "\061\066\053\071\060\072\045\073\046\074\057\075\044" +
    "\076\066\077\050\100\055\101\047\102\063\103\054\001" +
    "\002\000\006\023\103\062\176\001\002\000\072\006\uffb7" +
    "\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\022\uffb7\023\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\062\uffb7\064\uffb7" +
    "\104\uffb7\001\002\000\052\021\040\024\062\037\065\042" +
    "\073\054\051\061\056\063\067\065\061\066\053\071\060" +
    "\072\045\073\046\074\057\075\044\076\066\077\050\100" +
    "\055\101\047\102\063\103\054\001\002\000\006\023\103" +
    "\062\201\001\002\000\072\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\022\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\062\uffcc\064\uffcc\104\uffcc\001\002\000" +
    "\052\021\040\024\062\037\065\042\073\054\051\061\056" +
    "\063\067\065\061\066\053\071\060\072\045\073\046\074" +
    "\057\075\044\076\066\077\050\100\055\101\047\102\063" +
    "\103\054\001\002\000\006\023\103\062\204\001\002\000" +
    "\072\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\022\uffca\023" +
    "\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\062" +
    "\uffca\064\uffca\104\uffca\001\002\000\004\062\206\001\002" +
    "\000\072\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\022\uffc7" +
    "\023\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\062\uffc7\064\uffc7\104\uffc7\001\002\000\052\021\040\024" +
    "\062\037\065\042\073\054\051\061\056\063\067\065\061" +
    "\066\053\071\060\072\045\073\046\074\057\075\044\076" +
    "\066\077\050\100\055\101\047\102\063\103\054\001\002" +
    "\000\006\023\103\062\211\001\002\000\072\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\062\uffcb\064\uffcb\104" +
    "\uffcb\001\002\000\022\016\uffa1\017\uffa1\022\uffa1\023\uffa1" +
    "\040\uffa1\062\uffa1\064\uffa1\104\uffa1\001\002\000\004\061" +
    "\214\001\002\000\004\100\uffe3\001\002\000\004\100\216" +
    "\001\002\000\006\016\220\062\217\001\002\000\106\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\022\uffe7\023\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\042\uffe7\046" +
    "\uffe7\053\uffe7\061\uffe7\062\uffe7\064\uffe7\067\uffe7\071\uffe7" +
    "\104\uffe7\001\002\000\004\100\uffe4\001\002\000\016\004" +
    "\ufff1\005\ufff1\041\ufff1\052\ufff1\056\ufff1\071\ufff1\001\002" +
    "\000\010\016\ufff2\064\ufff2\104\ufff2\001\002\000\024\002" +
    "\ufff7\003\ufff7\004\ufff7\005\ufff7\041\ufff7\052\ufff7\056\ufff7" +
    "\070\ufff7\071\ufff7\001\002\000\004\071\225\001\002\000" +
    "\006\003\226\061\227\001\002\000\004\063\u0104\001\002" +
    "\000\020\004\020\005\031\016\uffe0\041\010\056\015\062" +
    "\uffe0\071\014\001\002\000\006\016\237\062\236\001\002" +
    "\000\006\016\uffe1\062\uffe1\001\002\000\010\042\034\053" +
    "\233\071\234\001\002\000\004\071\235\001\002\000\006" +
    "\016\uffde\062\uffde\001\002\000\006\016\uffdf\062\uffdf\001" +
    "\002\000\004\063\241\001\002\000\014\004\020\005\031" +
    "\041\010\056\015\071\014\001\002\000\006\016\uffe2\062" +
    "\uffe2\001\002\000\104\003\uffdb\004\uffdb\005\uffdb\021\uffdb" +
    "\024\uffdb\037\uffdb\041\uffdb\042\uffdb\044\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb\060\uffdb" +
    "\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\071\uffdb\072" +
    "\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb" +
    "\101\uffdb\102\uffdb\103\uffdb\001\002\000\104\003\255\004" +
    "\020\005\031\021\040\024\062\037\065\041\010\042\073" +
    "\044\253\047\247\050\261\051\252\052\023\054\051\055" +
    "\250\056\015\060\254\061\056\063\067\064\uffdd\065\061" +
    "\066\053\071\260\072\045\073\046\074\057\075\044\076" +
    "\066\077\050\100\055\101\047\102\063\103\054\001\002" +
    "\000\004\064\244\001\002\000\024\002\uffe6\003\uffe6\004" +
    "\uffe6\005\uffe6\041\uffe6\052\uffe6\056\uffe6\070\uffe6\071\uffe6" +
    "\001\002\000\104\003\uffd9\004\uffd9\005\uffd9\021\uffd9\024" +
    "\uffd9\037\uffd9\041\uffd9\042\uffd9\044\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\054\uffd9\055\uffd9\056\uffd9\060\uffd9\061" +
    "\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\071\uffd9\072\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101" +
    "\uffd9\102\uffd9\103\uffd9\001\002\000\104\003\uffdc\004\uffdc" +
    "\005\uffdc\021\uffdc\024\uffdc\037\uffdc\041\uffdc\042\uffdc\044" +
    "\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\060\uffdc\061\uffdc\063\uffdc\064\uffdc\065\uffdc\066" +
    "\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\076\uffdc" +
    "\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc\001\002\000" +
    "\006\003\364\061\365\001\002\000\044\037\065\054\051" +
    "\061\056\063\067\065\061\066\053\071\060\072\045\073" +
    "\046\074\057\075\044\076\066\077\050\100\055\101\047" +
    "\102\063\103\054\001\002\000\104\003\uffd8\004\uffd8\005" +
    "\uffd8\021\uffd8\024\uffd8\037\uffd8\041\uffd8\042\uffd8\044\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\052\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\060\uffd8\061\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8" +
    "\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\076\uffd8\077" +
    "\uffd8\100\uffd8\101\uffd8\102\uffd8\103\uffd8\001\002\000\006" +
    "\003\350\061\351\001\002\000\006\003\317\061\320\001" +
    "\002\000\052\021\040\024\062\037\065\042\073\054\051" +
    "\061\056\063\067\065\061\066\053\071\060\072\045\073" +
    "\046\074\057\075\044\076\066\077\050\100\055\101\047" +
    "\102\063\103\054\001\002\000\004\104\314\001\002\000" +
    "\004\104\313\001\002\000\004\104\312\001\002\000\070" +
    "\006\uff83\007\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014" +
    "\uff83\015\uff83\017\uff83\020\uff83\022\uff83\023\uff83\025\uff83" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034" +
    "\uff83\035\uff83\036\uff83\037\uff83\042\uffef\043\uffef\061\156" +
    "\071\uffef\001\002\000\006\003\300\061\301\001\002\000" +
    "\062\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\017\uff9a\020\uff9a\022\uff9a\023\uff9a\025" +
    "\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\037\uff9a\104\277\001\002\000" +
    "\060\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad" +
    "\014\uffad\015\uffad\017\uffad\020\135\022\uffad\023\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\267\032\270\033\272" +
    "\034\271\035\273\036\274\037\134\001\002\000\006\017" +
    "\265\023\103\001\002\000\052\021\040\024\062\037\065" +
    "\042\073\054\051\061\056\063\067\065\061\066\053\071" +
    "\060\072\045\073\046\074\057\075\044\076\066\077\050" +
    "\100\055\101\047\102\063\103\054\001\002\000\012\016" +
    "\uffb6\023\103\062\uffb6\104\uffb6\001\002\000\044\037\uffb4" +
    "\054\uffb4\061\uffb4\063\uffb4\065\uffb4\066\uffb4\071\uffb4\072" +
    "\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4" +
    "\101\uffb4\102\uffb4\103\uffb4\001\002\000\044\037\uffb3\054" +
    "\uffb3\061\uffb3\063\uffb3\065\uffb3\066\uffb3\071\uffb3\072\uffb3" +
    "\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101" +
    "\uffb3\102\uffb3\103\uffb3\001\002\000\044\037\uffb1\054\uffb1" +
    "\061\uffb1\063\uffb1\065\uffb1\066\uffb1\071\uffb1\072\uffb1\073" +
    "\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1" +
    "\102\uffb1\103\uffb1\001\002\000\044\037\uffb2\054\uffb2\061" +
    "\uffb2\063\uffb2\065\uffb2\066\uffb2\071\uffb2\072\uffb2\073\uffb2" +
    "\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102" +
    "\uffb2\103\uffb2\001\002\000\044\037\uffb0\054\uffb0\061\uffb0" +
    "\063\uffb0\065\uffb0\066\uffb0\071\uffb0\072\uffb0\073\uffb0\074" +
    "\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0" +
    "\103\uffb0\001\002\000\044\037\uffaf\054\uffaf\061\uffaf\063" +
    "\uffaf\065\uffaf\066\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf" +
    "\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103" +
    "\uffaf\001\002\000\044\037\065\054\051\061\056\063\067" +
    "\065\061\066\053\071\060\072\045\073\046\074\057\075" +
    "\044\076\066\077\050\100\055\101\047\102\063\103\054" +
    "\001\002\000\012\016\uffb5\037\134\062\uffb5\104\uffb5\001" +
    "\002\000\104\003\uffd7\004\uffd7\005\uffd7\021\uffd7\024\uffd7" +
    "\037\uffd7\041\uffd7\042\uffd7\044\uffd7\047\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\054\uffd7\055\uffd7\056\uffd7\060\uffd7\061\uffd7" +
    "\063\uffd7\064\uffd7\065\uffd7\066\uffd7\071\uffd7\072\uffd7\073" +
    "\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7" +
    "\102\uffd7\103\uffd7\001\002\000\004\063\307\001\002\000" +
    "\052\021\040\024\062\037\065\042\073\054\051\061\056" +
    "\063\067\065\061\066\053\071\060\072\045\073\046\074" +
    "\057\075\044\076\066\077\050\100\055\101\047\102\063" +
    "\103\054\001\002\000\006\023\103\062\303\001\002\000" +
    "\004\063\304\001\002\000\104\003\uffdb\004\uffdb\005\uffdb" +
    "\021\uffdb\024\uffdb\037\uffdb\041\uffdb\042\uffdb\044\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\071" +
    "\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb" +
    "\100\uffdb\101\uffdb\102\uffdb\103\uffdb\001\002\000\004\064" +
    "\306\001\002\000\104\003\uffc6\004\uffc6\005\uffc6\021\uffc6" +
    "\024\uffc6\037\uffc6\041\uffc6\042\uffc6\044\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\054\uffc6\055\uffc6\056\uffc6\060\uffc6" +
    "\061\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\071\uffc6\072" +
    "\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6" +
    "\101\uffc6\102\uffc6\103\uffc6\001\002\000\104\003\uffdb\004" +
    "\uffdb\005\uffdb\021\uffdb\024\uffdb\037\uffdb\041\uffdb\042\uffdb" +
    "\044\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076" +
    "\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103\uffdb\001\002" +
    "\000\004\064\311\001\002\000\104\003\uffc3\004\uffc3\005" +
    "\uffc3\021\uffc3\024\uffc3\037\uffc3\041\uffc3\042\uffc3\044\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\060\uffc3\061\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\001\002\000\104" +
    "\003\uffda\004\uffda\005\uffda\021\uffda\024\uffda\037\uffda\041" +
    "\uffda\042\uffda\044\uffda\047\uffda\050\uffda\051\uffda\052\uffda" +
    "\054\uffda\055\uffda\056\uffda\060\uffda\061\uffda\063\uffda\064" +
    "\uffda\065\uffda\066\uffda\071\uffda\072\uffda\073\uffda\074\uffda" +
    "\075\uffda\076\uffda\077\uffda\100\uffda\101\uffda\102\uffda\103" +
    "\uffda\001\002\000\104\003\uffd5\004\uffd5\005\uffd5\021\uffd5" +
    "\024\uffd5\037\uffd5\041\uffd5\042\uffd5\044\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\054\uffd5\055\uffd5\056\uffd5\060\uffd5" +
    "\061\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\071\uffd5\072" +
    "\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5" +
    "\101\uffd5\102\uffd5\103\uffd5\001\002\000\104\003\uffd3\004" +
    "\uffd3\005\uffd3\021\uffd3\024\uffd3\037\uffd3\041\uffd3\042\uffd3" +
    "\044\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\054\uffd3\055" +
    "\uffd3\056\uffd3\060\uffd3\061\uffd3\063\uffd3\064\uffd3\065\uffd3" +
    "\066\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3\001\002" +
    "\000\006\023\103\104\316\001\002\000\104\003\uffd4\004" +
    "\uffd4\005\uffd4\021\uffd4\024\uffd4\037\uffd4\041\uffd4\042\uffd4" +
    "\044\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\060\uffd4\061\uffd4\063\uffd4\064\uffd4\065\uffd4" +
    "\066\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076" +
    "\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4\001\002" +
    "\000\004\063\343\001\002\000\052\021\040\024\062\037" +
    "\065\042\073\054\051\061\056\063\067\065\061\066\053" +
    "\071\060\072\045\073\046\074\057\075\044\076\066\077" +
    "\050\100\055\101\047\102\063\103\054\001\002\000\006" +
    "\023\103\062\322\001\002\000\004\063\323\001\002\000" +
    "\104\003\uffdb\004\uffdb\005\uffdb\021\uffdb\024\uffdb\037\uffdb" +
    "\041\uffdb\042\uffdb\044\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\054\uffdb\055\uffdb\056\uffdb\060\uffdb\061\uffdb\063\uffdb" +
    "\064\uffdb\065\uffdb\066\uffdb\071\uffdb\072\uffdb\073\uffdb\074" +
    "\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb" +
    "\103\uffdb\001\002\000\004\064\325\001\002\000\106\003" +
    "\uffbb\004\uffbb\005\uffbb\021\uffbb\024\uffbb\037\uffbb\041\uffbb" +
    "\042\uffbb\044\uffbb\045\uffbb\047\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\060\uffbb\061\uffbb\063\uffbb" +
    "\064\uffbb\065\uffbb\066\uffbb\071\uffbb\072\uffbb\073\uffbb\074" +
    "\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb" +
    "\103\uffbb\001\002\000\106\003\uffb9\004\uffb9\005\uffb9\021" +
    "\uffb9\024\uffb9\037\uffb9\041\uffb9\042\uffb9\044\uffb9\045\330" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\060\uffb9\061\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9" +
    "\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077" +
    "\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\001\002\000\104" +
    "\003\uffbe\004\uffbe\005\uffbe\021\uffbe\024\uffbe\037\uffbe\041" +
    "\uffbe\042\uffbe\044\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\060\uffbe\061\uffbe\063\uffbe\064" +
    "\uffbe\065\uffbe\066\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe" +
    "\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103" +
    "\uffbe\001\002\000\006\044\332\063\331\001\002\000\104" +
    "\003\uffdb\004\uffdb\005\uffdb\021\uffdb\024\uffdb\037\uffdb\041" +
    "\uffdb\042\uffdb\044\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\060\uffdb\061\uffdb\063\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb" +
    "\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103" +
    "\uffdb\001\002\000\004\061\333\001\002\000\052\021\040" +
    "\024\062\037\065\042\073\054\051\061\056\063\067\065" +
    "\061\066\053\071\060\072\045\073\046\074\057\075\044" +
    "\076\066\077\050\100\055\101\047\102\063\103\054\001" +
    "\002\000\006\023\103\062\335\001\002\000\004\063\336" +
    "\001\002\000\104\003\uffdb\004\uffdb\005\uffdb\021\uffdb\024" +
    "\uffdb\037\uffdb\041\uffdb\042\uffdb\044\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb\060\uffdb\061" +
    "\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\071\uffdb\072\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101" +
    "\uffdb\102\uffdb\103\uffdb\001\002\000\004\064\340\001\002" +
    "\000\106\003\uffbc\004\uffbc\005\uffbc\021\uffbc\024\uffbc\037" +
    "\uffbc\041\uffbc\042\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\054\uffbc\055\uffbc\056\uffbc\060\uffbc\061" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\071\uffbc\072\uffbc" +
    "\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101" +
    "\uffbc\102\uffbc\103\uffbc\001\002\000\004\064\342\001\002" +
    "\000\104\003\uffba\004\uffba\005\uffba\021\uffba\024\uffba\037" +
    "\uffba\041\uffba\042\uffba\044\uffba\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\054\uffba\055\uffba\056\uffba\060\uffba\061\uffba\063" +
    "\uffba\064\uffba\065\uffba\066\uffba\071\uffba\072\uffba\073\uffba" +
    "\074\uffba\075\uffba\076\uffba\077\uffba\100\uffba\101\uffba\102" +
    "\uffba\103\uffba\001\002\000\104\003\uffdb\004\uffdb\005\uffdb" +
    "\021\uffdb\024\uffdb\037\uffdb\041\uffdb\042\uffdb\044\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\071" +
    "\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb" +
    "\100\uffdb\101\uffdb\102\uffdb\103\uffdb\001\002\000\004\064" +
    "\345\001\002\000\106\003\uffbb\004\uffbb\005\uffbb\021\uffbb" +
    "\024\uffbb\037\uffbb\041\uffbb\042\uffbb\044\uffbb\045\uffbb\047" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb\056\uffbb" +
    "\060\uffbb\061\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\071" +
    "\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb" +
    "\100\uffbb\101\uffbb\102\uffbb\103\uffbb\001\002\000\106\003" +
    "\uffb9\004\uffb9\005\uffb9\021\uffb9\024\uffb9\037\uffb9\041\uffb9" +
    "\042\uffb9\044\uffb9\045\330\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\060\uffb9\061\uffb9\063\uffb9" +
    "\064\uffb9\065\uffb9\066\uffb9\071\uffb9\072\uffb9\073\uffb9\074" +
    "\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9" +
    "\103\uffb9\001\002\000\104\003\uffbd\004\uffbd\005\uffbd\021" +
    "\uffbd\024\uffbd\037\uffbd\041\uffbd\042\uffbd\044\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\056\uffbd\060" +
    "\uffbd\061\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\071\uffbd" +
    "\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100" +
    "\uffbd\101\uffbd\102\uffbd\103\uffbd\001\002\000\004\063\357" +
    "\001\002\000\052\021\040\024\062\037\065\042\073\054" +
    "\051\061\056\063\067\065\061\066\053\071\060\072\045" +
    "\073\046\074\057\075\044\076\066\077\050\100\055\101" +
    "\047\102\063\103\054\001\002\000\006\023\103\062\353" +
    "\001\002\000\004\063\354\001\002\000\104\003\uffdb\004" +
    "\uffdb\005\uffdb\021\uffdb\024\uffdb\037\uffdb\041\uffdb\042\uffdb" +
    "\044\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076" +
    "\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103\uffdb\001\002" +
    "\000\004\064\356\001\002\000\104\003\uffc4\004\uffc4\005" +
    "\uffc4\021\uffc4\024\uffc4\037\uffc4\041\uffc4\042\uffc4\044\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\060\uffc4\061\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4" +
    "\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\001\002\000\104" +
    "\003\uffdb\004\uffdb\005\uffdb\021\uffdb\024\uffdb\037\uffdb\041" +
    "\uffdb\042\uffdb\044\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\060\uffdb\061\uffdb\063\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb" +
    "\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103" +
    "\uffdb\001\002\000\004\064\361\001\002\000\104\003\uffc1" +
    "\004\uffc1\005\uffc1\021\uffc1\024\uffc1\037\uffc1\041\uffc1\042" +
    "\uffc1\044\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\060\uffc1\061\uffc1\063\uffc1\064\uffc1\065" +
    "\uffc1\066\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1" +
    "\076\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\001" +
    "\002\000\006\037\134\104\363\001\002\000\104\003\uffd6" +
    "\004\uffd6\005\uffd6\021\uffd6\024\uffd6\037\uffd6\041\uffd6\042" +
    "\uffd6\044\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\054\uffd6" +
    "\055\uffd6\056\uffd6\060\uffd6\061\uffd6\063\uffd6\064\uffd6\065" +
    "\uffd6\066\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6" +
    "\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103\uffd6\001" +
    "\002\000\004\063\u0101\001\002\000\064\004\020\005\031" +
    "\021\040\024\062\037\065\041\010\042\073\052\023\054" +
    "\051\056\015\061\056\063\067\065\061\066\053\071\260" +
    "\072\045\073\046\074\057\075\044\076\066\077\050\100" +
    "\055\101\047\102\063\103\054\001\002\000\004\016\uffbf" +
    "\001\002\000\004\016\uffc0\001\002\000\004\016\371\001" +
    "\002\000\052\021\040\024\062\037\065\042\073\054\051" +
    "\061\056\063\067\065\061\066\053\071\060\072\045\073" +
    "\046\074\057\075\044\076\066\077\050\100\055\101\047" +
    "\102\063\103\054\001\002\000\006\016\373\023\103\001" +
    "\002\000\052\021\040\024\062\037\065\042\073\054\051" +
    "\061\056\063\067\065\061\066\053\071\060\072\045\073" +
    "\046\074\057\075\044\076\066\077\050\100\055\101\047" +
    "\102\063\103\054\001\002\000\004\062\375\001\002\000" +
    "\004\063\376\001\002\000\104\003\uffdb\004\uffdb\005\uffdb" +
    "\021\uffdb\024\uffdb\037\uffdb\041\uffdb\042\uffdb\044\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\071" +
    "\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb" +
    "\100\uffdb\101\uffdb\102\uffdb\103\uffdb\001\002\000\004\064" +
    "\u0100\001\002\000\104\003\uffc5\004\uffc5\005\uffc5\021\uffc5" +
    "\024\uffc5\037\uffc5\041\uffc5\042\uffc5\044\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\054\uffc5\055\uffc5\056\uffc5\060\uffc5" +
    "\061\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\071\uffc5\072" +
    "\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5" +
    "\101\uffc5\102\uffc5\103\uffc5\001\002\000\104\003\uffdb\004" +
    "\uffdb\005\uffdb\021\uffdb\024\uffdb\037\uffdb\041\uffdb\042\uffdb" +
    "\044\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb" +
    "\066\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076" +
    "\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103\uffdb\001\002" +
    "\000\004\064\u0103\001\002\000\104\003\uffc2\004\uffc2\005" +
    "\uffc2\021\uffc2\024\uffc2\037\uffc2\041\uffc2\042\uffc2\044\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\060\uffc2\061\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077" +
    "\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\001\002\000\104" +
    "\003\uffdb\004\uffdb\005\uffdb\021\uffdb\024\uffdb\037\uffdb\041" +
    "\uffdb\042\uffdb\044\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\060\uffdb\061\uffdb\063\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb" +
    "\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103" +
    "\uffdb\001\002\000\004\064\u0106\001\002\000\024\002\uffe5" +
    "\003\uffe5\004\uffe5\005\uffe5\041\uffe5\052\uffe5\056\uffe5\070" +
    "\uffe5\071\uffe5\001\002\000\024\002\ufff9\003\ufff9\004\ufff9" +
    "\005\ufff9\041\ufff9\052\ufff9\056\ufff9\070\ufff9\071\ufff9\001" +
    "\002\000\006\042\034\067\u0109\001\002\000\004\071\u010a" +
    "\001\002\000\004\104\u010b\001\002\000\024\002\ufff6\003" +
    "\ufff6\004\ufff6\005\ufff6\041\ufff6\052\ufff6\056\ufff6\070\ufff6" +
    "\071\ufff6\001\002\000\004\061\u010d\001\002\000\004\100" +
    "\uffe3\001\002\000\004\100\u010f\001\002\000\006\016\220" +
    "\062\u0110\001\002\000\106\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\022\uffe9\023\uffe9\025\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\042\uffe9\046\uffe9\053\uffe9\061\uffe9\062" +
    "\uffe9\064\uffe9\067\uffe9\071\uffe9\104\uffe9\001\002\000\006" +
    "\003\u0112\061\u0113\001\002\000\004\063\u0118\001\002\000" +
    "\004\062\u0114\001\002\000\004\063\u0115\001\002\000\104" +
    "\003\uffdb\004\uffdb\005\uffdb\021\uffdb\024\uffdb\037\uffdb\041" +
    "\uffdb\042\uffdb\044\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\060\uffdb\061\uffdb\063\uffdb\064" +
    "\uffdb\065\uffdb\066\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb" +
    "\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103" +
    "\uffdb\001\002\000\004\064\u0117\001\002\000\024\002\ufffb" +
    "\003\ufffb\004\ufffb\005\ufffb\041\ufffb\052\ufffb\056\ufffb\070" +
    "\ufffb\071\ufffb\001\002\000\104\003\uffdb\004\uffdb\005\uffdb" +
    "\021\uffdb\024\uffdb\037\uffdb\041\uffdb\042\uffdb\044\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb\071" +
    "\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb" +
    "\100\uffdb\101\uffdb\102\uffdb\103\uffdb\001\002\000\004\064" +
    "\u011a\001\002\000\024\002\ufffa\003\ufffa\004\ufffa\005\ufffa" +
    "\041\ufffa\052\ufffa\056\ufffa\070\ufffa\071\ufffa\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\006\002\003\005\004\001\001\000\002\001" +
    "\001\000\022\003\012\004\010\006\024\007\016\010\023" +
    "\011\006\013\020\054\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\u0107\054\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\027\001\001\000\012\007\031\010" +
    "\023\013\032\054\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\030\063\031\051\034\101\035\100\036\077" +
    "\037\076\040\075\041\074\042\073\043\071\044\070\045" +
    "\067\052\040\053\036\056\042\057\041\001\001\000\002" +
    "\001\001\000\036\030\063\031\051\036\211\037\076\040" +
    "\075\041\074\042\073\043\071\044\070\045\067\052\040" +
    "\053\036\056\042\057\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\172\054\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\030\063\031\051\034\165\035\100\036\077\037\076" +
    "\040\075\041\074\042\073\043\071\044\070\045\067\052" +
    "\040\053\036\056\042\057\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\030\063\031" +
    "\051\044\151\045\067\052\040\053\036\056\042\057\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\030" +
    "\063\031\051\034\147\035\100\036\077\037\076\040\075" +
    "\041\074\042\073\043\071\044\070\045\067\052\040\053" +
    "\036\056\042\057\041\001\001\000\002\001\001\000\004" +
    "\055\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\030\063\031\051\044\132\045\067" +
    "\052\040\053\036\056\042\057\041\001\001\000\006\046" +
    "\123\047\122\001\001\000\004\050\112\001\001\000\004" +
    "\051\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\030\063\031\051" +
    "\035\103\036\077\037\076\040\075\041\074\042\073\043" +
    "\071\044\070\045\067\052\040\053\036\056\042\057\041" +
    "\001\001\000\002\001\001\000\036\030\063\031\051\036" +
    "\105\037\076\040\075\041\074\042\073\043\071\044\070" +
    "\045\067\052\040\053\036\056\042\057\041\001\001\000" +
    "\002\001\001\000\032\030\063\031\051\040\111\041\074" +
    "\042\073\043\071\044\070\045\067\052\040\053\036\056" +
    "\042\057\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\030\063\031\051\040\117\041" +
    "\074\042\073\043\071\044\070\045\067\052\040\053\036" +
    "\056\042\057\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\030\063\031" +
    "\051\042\131\043\071\044\070\045\067\052\040\053\036" +
    "\056\042\057\041\001\001\000\024\030\063\031\051\043" +
    "\130\044\070\045\067\052\040\053\036\056\042\057\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\123" +
    "\001\001\000\002\001\001\000\004\055\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\030\063\031\051" +
    "\034\137\035\100\036\077\037\076\040\075\041\074\042" +
    "\073\043\071\044\070\045\067\052\040\053\036\056\042" +
    "\057\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\030\063\031\051\034\143\035\100" +
    "\036\077\037\076\040\075\041\074\042\073\043\071\044" +
    "\070\045\067\052\040\053\036\056\042\057\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\030\063\031\051\034\153\035\100\036" +
    "\077\037\076\040\075\041\074\042\073\043\071\044\070" +
    "\045\067\052\040\053\036\056\042\057\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\027\156\030\063" +
    "\031\051\034\157\035\100\036\077\037\076\040\075\041" +
    "\074\042\073\043\071\044\070\045\067\052\040\053\036" +
    "\056\042\057\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\030\063\031\051\034\162" +
    "\035\100\036\077\037\076\040\075\041\074\042\073\043" +
    "\071\044\070\045\067\052\040\053\036\056\042\057\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\030\063" +
    "\031\051\034\170\035\100\036\077\037\076\040\075\041" +
    "\074\042\073\043\071\044\070\045\067\052\040\053\036" +
    "\056\042\057\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\030\063\031\051\034\174" +
    "\035\100\036\077\037\076\040\075\041\074\042\073\043" +
    "\071\044\070\045\067\052\040\053\036\056\042\057\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\030" +
    "\063\031\051\034\177\035\100\036\077\037\076\040\075" +
    "\041\074\042\073\043\071\044\070\045\067\052\040\053" +
    "\036\056\042\057\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\030\063\031\051\034\202\035\100\036" +
    "\077\037\076\040\075\041\074\042\073\043\071\044\070" +
    "\045\067\052\040\053\036\056\042\057\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\030\063\031\051\034\207\035\100\036" +
    "\077\037\076\040\075\041\074\042\073\043\071\044\070" +
    "\045\067\052\040\053\036\056\042\057\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\231" +
    "\014\227\015\230\054\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\231\015\237\054\011\001\001\000\002\001\001\000\006" +
    "\020\241\021\242\001\001\000\062\007\256\010\023\013" +
    "\032\017\245\022\244\024\250\030\261\031\051\032\255" +
    "\034\263\035\100\036\077\037\076\040\075\041\074\042" +
    "\073\043\071\044\070\045\262\052\040\053\036\054\011" +
    "\056\042\057\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\030\063\031\051\045\361\052\040\053\036\056" +
    "\042\057\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\030\063\031\051\034\314\035" +
    "\100\036\077\037\076\040\075\041\074\042\073\043\071" +
    "\044\070\045\067\052\040\053\036\056\042\057\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\274\001\001\000\002\001\001\000\042\030\063" +
    "\031\051\034\265\035\100\036\077\037\076\040\075\041" +
    "\074\042\073\043\071\044\070\045\067\052\040\053\036" +
    "\056\042\057\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\030\063\031" +
    "\051\045\275\052\040\053\036\056\042\057\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\030\063\031\051\034\301\035\100\036\077\037\076" +
    "\040\075\041\074\042\073\043\071\044\070\045\067\052" +
    "\040\053\036\056\042\057\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\241\021\304\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\241\021\307" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\030\063\031" +
    "\051\034\320\035\100\036\077\037\076\040\075\041\074" +
    "\042\073\043\071\044\070\045\067\052\040\053\036\056" +
    "\042\057\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\241\021\323\001\001\000\002\001\001\000" +
    "\004\025\325\001\001\000\004\026\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\241\021\340\001" +
    "\001\000\002\001\001\000\042\030\063\031\051\034\333" +
    "\035\100\036\077\037\076\040\075\041\074\042\073\043" +
    "\071\044\070\045\067\052\040\053\036\056\042\057\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\241\021\336\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\241\021" +
    "\343\001\001\000\002\001\001\000\004\025\345\001\001" +
    "\000\004\026\346\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\030\063\031\051\034\351\035\100\036\077" +
    "\037\076\040\075\041\074\042\073\043\071\044\070\045" +
    "\067\052\040\053\036\056\042\057\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\241\021\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\241" +
    "\021\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\007\366\010\023\013\032\023\367\030\063\031\051\032" +
    "\365\034\263\035\100\036\077\037\076\040\075\041\074" +
    "\042\073\043\071\044\070\045\262\052\040\053\036\054" +
    "\011\056\042\057\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\030\063\031\051\034" +
    "\371\035\100\036\077\037\076\040\075\041\074\042\073" +
    "\043\071\044\070\045\067\052\040\053\036\056\042\057" +
    "\041\001\001\000\002\001\001\000\044\030\063\031\051" +
    "\032\373\034\263\035\100\036\077\037\076\040\075\041" +
    "\074\042\073\043\071\044\070\045\262\052\040\053\036" +
    "\056\042\057\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\241\021\376\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\241\021\u0101\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\241\021\u0104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u010d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\241\021\u0115\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\241\021\u0118\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTExp$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTExp$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTExp$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresExp();
   AnalizadorLexicoExp alex = (AnalizadorLexicoExp)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresExp errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTExp$actions {
  private final ConstructorASTExp parser;

  /** Constructor */
  CUP$ConstructorASTExp$actions(ConstructorASTExp parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action_part00000000(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTExp$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTExp$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= LGLOBALES 
            {
              Programa RESULT =null;
		List<Instruccion> lgobs = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Programa(lgobs); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTExp$parser.done_parsing();
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LGLOBALES ::= LGLOBALES DECLARACION 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> lgobs = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Declaracion decl = (Declaracion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 lgobs.add(decl); RESULT = lgobs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LGLOBALES",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LGLOBALES ::= LGLOBALES FUNCION 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> lgobs = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Funcion fun = (Funcion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 lgobs.add(fun); RESULT = lgobs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LGLOBALES",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LGLOBALES ::= LGLOBALES PROGMAIN 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> lgobs = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Funcion pmain = (Funcion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 lgobs.add(pmain); RESULT = lgobs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LGLOBALES",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LGLOBALES ::= 
            {
              List<Instruccion> RESULT =null;
		 RESULT = new ArrayList<Instruccion>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LGLOBALES",3, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGMAIN ::= NUM MAIN PAP PCIERRE LLAVEAP DECFUNCION LLAVECIE 
            {
              Funcion RESULT =null;
		List<Instruccion> decfun = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = new Funcion(new TiposBasicos(KindTipo.NUM), "main", new ArrayList<Argumento> (), decfun); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("PROGMAIN",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGMAIN ::= NUM MAIN error LLAVEAP DECFUNCION LLAVECIE 
            {
              Funcion RESULT =null;
		List<Instruccion> decfun = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		System.out.println("ERROR EN MAIN"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("PROGMAIN",1, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACION ::= CREACION PUNTOCOMA 
            {
              Declaracion RESULT =null;
		Creacion creacion = (Creacion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = creacion; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= ALIAS 
            {
              Declaracion RESULT =null;
		Alias alias = (Alias)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = alias; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECLARACION ::= error PUNTOCOMA 
            {
              Declaracion RESULT =null;
		TokenValue pc = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 System.out.println("ERROR EN DECLARACION"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ALIAS ::= TYPEDEF TIPO AS IDEN PUNTOCOMA 
            {
              Alias RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue nombre = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		RESULT = new Alias(tipo, nombre.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ALIAS",7, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CREACION ::= REGISTRO 
            {
              Creacion RESULT =null;
		Registro reg = (Registro)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = reg; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CREACION",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CREACION ::= TIPO IDEN 
            {
              Creacion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Creacion(tipo, iden.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CREACION",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CREACION ::= TIPO IDEN ASIG E0 
            {
              Creacion RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Creacion(tipo, iden.lexema, exp0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CREACION",5, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // REGISTRO ::= REG IDEN LLAVEAP LCAMPOS CREACION LLAVECIE 
            {
              Registro RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		List<Creacion> lcamp = (List<Creacion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Creacion camp = (Creacion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Registro(name.lexema, lcamp, camp); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("REGISTRO",6, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LCAMPOS ::= LCAMPOS CREACION DOSPUNTOS 
            {
              List<Creacion> RESULT =null;
		List<Creacion> lcamp = (List<Creacion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Creacion camp = (Creacion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 lcamp.add(camp); RESULT = lcamp; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LCAMPOS",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LCAMPOS ::= 
            {
              List<Creacion> RESULT =null;
		 RESULT = new ArrayList<Creacion>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LCAMPOS",8, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOSBASICOS ::= IDEN 
            {
              Tipo RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new TipoNombre(id.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TIPOSBASICOS",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPOSBASICOS ::= NUM 
            {
              Tipo RESULT =null;
		 RESULT = new TiposBasicos(KindTipo.NUM); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TIPOSBASICOS",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TIPOSBASICOS ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new TiposBasicos(KindTipo.BOOL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TIPOSBASICOS",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPOSBASICOS ::= RIAL 
            {
              Tipo RESULT =null;
		 RESULT = new TiposBasicos(KindTipo.RIAL); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TIPOSBASICOS",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPOSBASICOS ::= VOID 
            {
              Tipo RESULT =null;
		 RESULT = new TiposBasicos(KindTipo.VOID); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TIPOSBASICOS",42, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= TIPOSBASICOS 
            {
              Tipo RESULT =null;
		Tipo tipba = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = tipba; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TIPO",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= TIPOSBASICOS LIST PAP VALORES ENT PCIERRE 
            {
              Tipo RESULT =null;
		Tipo tipba = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-5)).value;
		List<Ent> valors = (List<Ent>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		valors.add(new Ent(e.lexema)); RESULT = new TipoArray(tipba, valors); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TIPO",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= TIPO POINTER 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new TipoPuntero(tipo); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TIPO",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= TIPO POINTER LIST PAP VALORES ENT PCIERRE 
            {
              Tipo RESULT =null;
		Tipo tipba = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		List<Ent> valors = (List<Ent>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		valors.add(new Ent(e.lexema)); RESULT = new ListPuntero(tipba, valors); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("TIPO",9, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCION ::= TIPO FUN IDEN PAP LARGUMENTOS PCIERRE LLAVEAP DECFUNCION LLAVECIE 
            {
              Funcion RESULT =null;
		Tipo type = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		List<Argumento> largs = (List<Argumento>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		List<Instruccion> decfun = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Funcion(type, name.lexema, largs, decfun); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("FUNCION",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= TIPO FUN IDEN error LLAVEAP DECFUNCION LLAVECIE 
            {
              Funcion RESULT =null;
		 System.out.println("ERROR EN FUNCION"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("FUNCION",4, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALORES ::= VALORES ENT DOSPUNTOS 
            {
              List<Ent> RESULT =null;
		List<Ent> valors = (List<Ent>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 valors.add(new Ent(e.lexema)); RESULT = valors; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("VALORES",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALORES ::= 
            {
              List<Ent> RESULT =null;
		 RESULT = new ArrayList<Ent>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("VALORES",12, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LARGUMENTOS ::= LARGUMENTOS DOSPUNTOS ARGUMENTO 
            {
              List<Argumento> RESULT =null;
		List<Argumento> largs = (List<Argumento>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Argumento arg = (Argumento)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 largs.add(arg); RESULT = largs; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LARGUMENTOS",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LARGUMENTOS ::= ARGUMENTO 
            {
              List<Argumento> RESULT =null;
		Argumento arg = (Argumento)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ArrayList<Argumento>(); RESULT.add(arg); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LARGUMENTOS",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LARGUMENTOS ::= 
            {
              List<Argumento> RESULT =null;
		 RESULT = new ArrayList<Argumento>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LARGUMENTOS",10, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARGUMENTO ::= TIPO REF IDEN 
            {
              Argumento RESULT =null;
		Tipo type = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT  = new Argumento(type, name.lexema, 1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARGUMENTO ::= TIPO IDEN 
            {
              Argumento RESULT =null;
		Tipo type = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT  = new Argumento(type, name.lexema, 0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ARGUMENTO",11, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECFUNCION ::= LINSTRUCCION 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> linst = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = linst; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DECFUNCION",15, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LINSTRUCCION ::= LINSTRUCCION INSTRUCCION 
            {
              List<Instruccion> RESULT =null;
		List<Instruccion> linst = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Instruccion inst = (Instruccion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 linst.add(inst); RESULT = linst; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LINSTRUCCION",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LINSTRUCCION ::= 
            {
              List<Instruccion> RESULT =null;
		 RESULT = new ArrayList<Instruccion>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LINSTRUCCION",14, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION ::= CREACION PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Creacion creacion = (Creacion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = creacion; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION ::= BUCLES 
            {
              Instruccion RESULT =null;
		Bucles bucles = (Bucles)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = bucles; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= CONDICIONAL 
            {
              Instruccion RESULT =null;
		Condicional cond = (Condicional)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = cond; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCION ::= LLAMADA PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Llamada llamada = (Llamada)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = llamada; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUCCION ::= DELETE E9 PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Delete(exp0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCION ::= ASIGNACION PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Asignacion asig = (Asignacion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = asig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCION ::= RETURN E0 PUNTOCOMA 
            {
              Instruccion RESULT =null;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Return(exp0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCION ::= error PUNTOCOMA 
            {
              Instruccion RESULT =null;
		 System.out.println("ERROR EN INSTRUCCION"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",13, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LLAMADA ::= IDEN PAP ARGUMENTOS2 PCIERRE 
            {
              Llamada RESULT =null;
		TokenValue name = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		List<Expresion> arg2 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Llamada(name.lexema, arg2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LLAMADA",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LLAMADA ::= WRITES 
            {
              Llamada RESULT =null;
		Writes name = (Writes)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = name; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LLAMADA",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LLAMADA ::= READS 
            {
              Llamada RESULT =null;
		Reads name = (Reads)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = name; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LLAMADA",22, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARGUMENTOS2 ::= ARGUMENTOS2 DOSPUNTOS E0 
            {
              List<Expresion> RESULT =null;
		List<Expresion> args2 = (List<Expresion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 args2.add(exp0); RESULT = args2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS2",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARGUMENTOS2 ::= E0 
            {
              List<Expresion> RESULT =null;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ArrayList<Expresion>(); RESULT.add(exp0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS2",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARGUMENTOS2 ::= 
            {
              List<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS2",21, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WRITES ::= WRITEBOOL PAP E0 PCIERRE 
            {
              Writes RESULT =null;
		TokenValue wb = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Object pap = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Writes(wb.lexema, new TiposBasicos(KindTipo.BOOL), exp0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("WRITES",44, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WRITES ::= WRITERIAL PAP E0 PCIERRE 
            {
              Writes RESULT =null;
		TokenValue wr = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Object pap = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Writes(wr.lexema, new TiposBasicos(KindTipo.RIAL), exp0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("WRITES",44, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // WRITES ::= WRITENUM PAP E0 PCIERRE 
            {
              Writes RESULT =null;
		TokenValue wn = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Object pap = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Writes(wn.lexema, new TiposBasicos(KindTipo.NUM), exp0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("WRITES",44, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // READS ::= READBOOL PAP PCIERRE 
            {
              Reads RESULT =null;
		TokenValue rb = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object pap = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Reads(rb.lexema,new TiposBasicos(KindTipo.BOOL)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("READS",45, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // READS ::= READRIAL PAP PCIERRE 
            {
              Reads RESULT =null;
		TokenValue rr = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object pap = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Reads(rr.lexema,new TiposBasicos(KindTipo.RIAL)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("READS",45, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // READS ::= READNUM PAP PCIERRE 
            {
              Reads RESULT =null;
		TokenValue rn = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Object pap = (Object)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Reads(rn.lexema,new TiposBasicos(KindTipo.NUM)); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("READS",45, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BUCLES ::= WHILE PAP E0 PCIERRE LLAVEAP DECFUNCION LLAVECIE 
            {
              Bucles RESULT =null;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		List<Instruccion> decfun = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new While(exp0, decfun); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BUCLES",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BUCLES ::= FOR PAP INICIALIZAR DOSPUNTOS E0 DOSPUNTOS ASIGNACION PCIERRE LLAVEAP DECFUNCION LLAVECIE 
            {
              Bucles RESULT =null;
		Declaracion ini = (Declaracion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		Asignacion asig = (Asignacion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		List<Instruccion> decfun = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new For(ini, exp0, decfun, asig); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BUCLES",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BUCLES ::= LOOP PAP E0 PCIERRE LLAVEAP DECFUNCION LLAVECIE 
            {
              Bucles RESULT =null;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		List<Instruccion> decfun = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Loop(exp0, decfun); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BUCLES",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BUCLES ::= WHILE error LLAVEAP DECFUNCION LLAVECIE 
            {
              Bucles RESULT =null;
		 System.out.println("ERROR EN WHILE"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BUCLES",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BUCLES ::= FOR error LLAVEAP DECFUNCION LLAVECIE 
            {
              Bucles RESULT =null;
		 System.out.println("ERROR EN FOR"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BUCLES",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BUCLES ::= LOOP error LLAVEAP DECFUNCION LLAVECIE 
            {
              Bucles RESULT =null;
		 System.out.println("ERROR EN LOOP"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("BUCLES",16, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INICIALIZAR ::= CREACION 
            {
              Declaracion RESULT =null;
		Creacion creac = (Creacion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = creac; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("INICIALIZAR",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INICIALIZAR ::= ASIGNACION 
            {
              Declaracion RESULT =null;
		Asignacion asig = (Asignacion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = asig; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("INICIALIZAR",17, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDICIONAL ::= IF PAP E0 PCIERRE LLAVEAP DECFUNCION LLAVECIE LCONDICIONAL2 CONDICIONAL3 
            {
              Condicional RESULT =null;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-6)).value;
		List<Instruccion> decfuncion = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		List<Condicional2> lcond2 = (List<Condicional2>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Condicional3 cond3 = (Condicional3)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Condicional(exp0, decfuncion, lcond2, cond3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONDICIONAL ::= IF error LLAVEAP DECFUNCION LLAVECIE LCONDICIONAL2 CONDICIONAL3 
            {
              Condicional RESULT =null;
		 System.out.println("ERROR EN CONDICIONAL"); RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",18, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LCONDICIONAL2 ::= LCONDICIONAL2 ELSE IF PAP E0 PCIERRE LLAVEAP DECFUNCION LLAVECIE 
            {
              List<Condicional2> RESULT =null;
		List<Condicional2> lcond2 = (List<Condicional2>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-8)).value;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		List<Instruccion> decfuncion = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 lcond2.add(new Condicional2(exp0, decfuncion)); RESULT = lcond2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LCONDICIONAL2",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LCONDICIONAL2 ::= 
            {
              List<Condicional2> RESULT =null;
		 RESULT = new ArrayList<Condicional2>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("LCONDICIONAL2",19, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONDICIONAL3 ::= ELSE LLAVEAP DECFUNCION LLAVECIE 
            {
              Condicional3 RESULT =null;
		List<Instruccion> decfuncion = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Condicional3(decfuncion); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CONDICIONAL3",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONDICIONAL3 ::= 
            {
              Condicional3 RESULT =null;
		 RESULT = null; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CONDICIONAL3",20, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DINAMICA ::= NEW TIPO 
            {
              Dinamica RESULT =null;
		Tipo type = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Dinamica(type); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DINAMICA",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DINAMICA ::= NEW TIPO PAP E0 PCIERRE 
            {
              Dinamica RESULT =null;
		Tipo type = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-3)).value;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new Dinamica(type, exp0); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("DINAMICA",23, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION ::= E0 ASIG E0 
            {
              Asignacion RESULT =null;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Asignacion(exp0, exp1, KindAsig.ASIG); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ASIGNACION",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIGNACION ::= E9 OPASIG E9 
            {
              Asignacion RESULT =null;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		KindAsig op = (KindAsig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Asignacion(exp0, new EBin(exp0, exp1, op), KindAsig.ASIG); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("ASIGNACION",24, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPASIG ::= SUMAPREF 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.MAS; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OPASIG",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPASIG ::= RESTAPREF 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.MENOS; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OPASIG",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPASIG ::= MULTIPREF 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.POR; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OPASIG",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPASIG ::= DIVIPREF 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.DIV; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OPASIG",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPASIG ::= MODPREF 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.MOD; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OPASIG",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPASIG ::= DIVENTPREF 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.DIVENT; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OPASIG",25, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E8 ::= E9 ACCESO IDEN 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		TokenValue iden = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new EAccesoStruct(exp1, new Unitario(iden.lexema), KindAsig.ACCESO); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E8 ::= E9 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = exp1; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E8",34, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E7 ::= POINTER E8 
            {
              Expresion RESULT =null;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExprePointer(exp2, KindAsig.POINTER); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E7 ::= DOLLAR E8 
            {
              Expresion RESULT =null;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new EUn(exp2, KindAsig.DOLLAR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E7 ::= E8 
            {
              Expresion RESULT =null;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = exp2; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E7",33, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E6 ::= E6 OP1 E7 
            {
              Expresion RESULT =null;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		KindAsig op1 = (KindAsig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Expresion exp3 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new EBin(exp2, exp3, op1); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E6 ::= E7 
            {
              Expresion RESULT =null;
		Expresion exp3 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = exp3; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E6",32, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E5 ::= E6 OP2 E6 
            {
              Expresion RESULT =null;
		Expresion exp3 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		KindAsig op2 = (KindAsig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Expresion exp4 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new EBin(exp3, exp4, op2); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E5 ::= E6 
            {
              Expresion RESULT =null;
		Expresion exp4 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = exp4; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E5",31, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E4 ::= E5 OP3 E4 
            {
              Expresion RESULT =null;
		Expresion exp4 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		KindAsig op3 = (KindAsig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Expresion exp5 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new EBin(exp4, exp5, op3); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E4 ::= E5 
            {
              Expresion RESULT =null;
		Expresion exp5 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = exp5; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E4",30, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E3 ::= E4 OP4 E4 
            {
              Expresion RESULT =null;
		Expresion exp5 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		KindAsig op4 = (KindAsig)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		Expresion exp6 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new EBin(exp5, exp6, op4); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E3 ::= E4 
            {
              Expresion RESULT =null;
		Expresion exp6 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = exp6; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E3",29, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E2 ::= EXCLAM E2 
            {
              Expresion RESULT =null;
		Expresion exp7 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new EUn(exp7, KindAsig.EXCLAM); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E2 ::= E3 
            {
              Expresion RESULT =null;
		Expresion exp7 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = exp7; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E2",28, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E1 ::= E1 AND E2 
            {
              Expresion RESULT =null;
		Expresion exp7 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Expresion exp8 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new EBin(exp7, exp8, KindAsig.AND); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E1 ::= E2 
            {
              Expresion RESULT =null;
		Expresion exp8 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = exp8; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E1",27, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E0 ::= E0 OR E1 
            {
              Expresion RESULT =null;
		Expresion exp8 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Expresion exp9 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new EBin(exp8, exp9, KindAsig.OR); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E0",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E0 ::= E1 
            {
              Expresion RESULT =null;
		Expresion exp9 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = exp9; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E0",26, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E9 ::= UNITARIO 
            {
              Expresion RESULT =null;
		Unitario uni = (Unitario)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = uni; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E9 ::= LLAMADA 
            {
              Expresion RESULT =null;
		Llamada call = (Llamada)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new ExpLlamada(call); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E9 ::= CONSTANTE 
            {
              Expresion RESULT =null;
		Constante cons = (Constante)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = cons; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E9 ::= TOFLOAT PAP E0 PCIERRE 
            {
              Expresion RESULT =null;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new EUn(exp0, KindAsig.TOFLOAT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E9 ::= TOINT PAP E0 PCIERRE 
            {
              Expresion RESULT =null;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new EUn(exp0, KindAsig.TOINT); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E9 ::= E9 CORCHETEAP INICIOS E0 CORCHETECIERRE 
            {
              Expresion RESULT =null;
		Expresion exp9 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-4)).value;
		List<Expresion> la = (List<Expresion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 la.add(exp0); RESULT = new EAcceso(exp9, la, KindAsig.CORCH); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E9 ::= PAP E0 PCIERRE 
            {
              Expresion RESULT =null;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new EUn(exp0, KindAsig.PARE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E9 ::= DINAMICA 
            {
              Expresion RESULT =null;
		Dinamica dina = (Dinamica)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = dina; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E9 ::= LLAVEAP INICIOS E0 LLAVECIE 
            {
              Expresion RESULT =null;
		List<Expresion> inicios = (List<Expresion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 inicios.add(e); RESULT = new ExpreLlave(inicios, KindAsig.LLAVE); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E9 ::= CORCHETEAP E0 CORCHETECIERRE 
            {
              Expresion RESULT =null;
		Expresion exp0 = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 RESULT = new ExpreCorch(exp0, KindAsig.CORCH); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("E9",35, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INICIOS ::= INICIOS E0 DOSPUNTOS 
            {
              List<Expresion> RESULT =null;
		List<Expresion> ini = (List<Expresion>)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.elementAt(CUP$ConstructorASTExp$top-1)).value;
		 ini.add(exp); RESULT = ini; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("INICIOS",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INICIOS ::= 
            {
              List<Expresion> RESULT =null;
		 RESULT = new ArrayList<Expresion>(); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("INICIOS",43, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OP1 ::= POR 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.POR; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OP1",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OP1 ::= DIVENT 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.DIVENT; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OP1",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OP1 ::= MOD 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.MOD; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OP1",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OP1 ::= DIV 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.DIV; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OP1",36, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OP2 ::= MAS 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.MAS; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OP2",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OP2 ::= MENOS 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.MENOS; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OP2",37, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OP3 ::= MAYOR 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.MAYOR; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OP3",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OP3 ::= MENOR 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.MENOR; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OP3",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OP3 ::= MAYORIG 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.MAYORIG; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OP3",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OP3 ::= MENORIG 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.MENORIG; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OP3",38, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OP4 ::= IGUALIG 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.IGUALIG; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OP4",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OP4 ::= DISTINTO 
            {
              KindAsig RESULT =null;
		 RESULT = KindAsig.DISTINTO; 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("OP4",39, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // UNITARIO ::= IDEN 
            {
              Unitario RESULT =null;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Unitario(id.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("UNITARIO",41, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONSTANTE ::= ENT 
            {
              Constante RESULT =null;
		TokenValue e = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Ent(e.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CONSTANTE",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CONSTANTE ::= REAL 
            {
              Constante RESULT =null;
		TokenValue r = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Real(r.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CONSTANTE",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CONSTANTE ::= FACT 
            {
              Constante RESULT =null;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Bool(f.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CONSTANTE",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CONSTANTE ::= INFACT 
            {
              Constante RESULT =null;
		TokenValue i = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTExp$stack.peek()).value;
		 RESULT = new Bool(i.lexema); 
              CUP$ConstructorASTExp$result = parser.getSymbolFactory().newSymbol("CONSTANTE",40, RESULT);
            }
          return CUP$ConstructorASTExp$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTExp$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTExp$do_action(
    int                        CUP$ConstructorASTExp$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTExp$parser,
    java.util.Stack            CUP$ConstructorASTExp$stack,
    int                        CUP$ConstructorASTExp$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTExp$do_action_part00000000(
                               CUP$ConstructorASTExp$act_num,
                               CUP$ConstructorASTExp$parser,
                               CUP$ConstructorASTExp$stack,
                               CUP$ConstructorASTExp$top);
    }
}

